{"version":3,"sources":["components/box/index.tsx","components/boxes/index.tsx"],"names":["Box","_ref","_ref$scale","scale","_useIntro","box","useRef","useRender","current","rotation","x","y","_useSpring","useSpring","from","currentScale","currentOpacity","config","molasses","delay","useIntro","_useIntro2","Object","slicedToArray","react_default","a","createElement","ref","three","mesh","attach","meshLambertMaterial","opacity","transparent","Boxes","className","dist","color","Color","intensity","position","Vector3","Array","fill","map","_","i","components_box","key"],"mappings":"2JAgCA,IAiBeA,EAjBqB,SAAAC,GAAmB,IAAAC,EAAAD,EAAhBE,MAAgBC,EA1BvD,SAAkBD,GAChB,IAAME,EAAMC,mBAEZC,YAAU,WACFF,GAAOA,EAAIG,UAIjBH,EAAIG,QAAQC,SAASC,GAAKP,EAAQ,IAClCE,EAAIG,QAAQC,SAASE,GAAUR,EAAQ,IAAb,KATG,IAAAS,EAYUC,YAAU,CACjDC,KAAM,CACJC,aAAc,CAAC,IAAM,IAAM,KAC3BC,eAAgB,GAElBD,aAAc,CAACZ,EAAOA,EAAOA,GAC7Ba,eAAgB,IAChBC,OAAQA,IAAOC,SACfC,MAAO,IAAMhB,IARPY,EAZuBH,EAYvBG,aAAcC,EAZSJ,EAYTI,eAWtB,MAAO,CAACX,EAAKU,EAAcC,GAIiBI,MADS,IAAAlB,EAAR,EAAQA,GAAAmB,EAAAC,OAAAC,EAAA,EAAAD,CAAAlB,EAAA,GAC9CC,EAD8CgB,EAAA,GACzCN,EADyCM,EAAA,GAC3BL,EAD2BK,EAAA,GAGrD,OACEG,EAAAC,EAAAC,cAAA,SAAOC,IAAKtB,GACVmB,EAAAC,EAAAC,cAACE,EAAA,EAASC,KAAV,CAAe1B,MAAOY,GACpBS,EAAAC,EAAAC,cAAA,eAAaI,OAAO,aACpBN,EAAAC,EAAAC,cAACE,EAAA,EAASG,oBAAV,CACED,OAAO,WACPE,QAAShB,EACTiB,aAAW,OCjBNC,UAnBG,WAChB,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,UACbX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,gBAAcW,MAAO,IAAIC,QAAM,QAASC,UAAW,KACnDf,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oBACEc,SAAU,IAAIC,UAAQ,GAAI,EAAG,GAC7BJ,MAAO,IAAIC,QAAM,QACjBC,UAAW,MAEZ,IAAIG,MAAM,IAAIC,KAAK,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAC5BtB,EAAAC,EAAAC,cAACqB,EAAD,CAAKC,IAAKF,EAAG3C,MAAO,EAAI2C,EAAI","file":"static/js/4.66855a0b.chunk.js","sourcesContent":["import React, { FC, useRef } from 'react';\nimport { useRender } from 'react-three-fiber';\nimport { Group } from 'three';\nimport { animated, useSpring } from 'react-spring/three';\nimport { config } from 'react-spring';\n\nfunction useIntro(scale: number) {\n  const box = useRef<Group>();\n\n  useRender(() => {\n    if (!(box && box.current)) {\n      return;\n    }\n\n    box.current.rotation.x += scale / 1000;\n    box.current.rotation.y += 2 * (scale / 1000);\n  });\n\n  const { currentScale, currentOpacity } = useSpring({\n    from: {\n      currentScale: [0.01, 0.01, 0.01],\n      currentOpacity: 0,\n    },\n    currentScale: [scale, scale, scale],\n    currentOpacity: 0.15,\n    config: config.molasses,\n    delay: 500 / scale,\n  });\n\n  return [box, currentScale, currentOpacity];\n}\n\nconst Box: FC<{ scale?: number }> = ({ scale = 3 }) => {\n  const [box, currentScale, currentOpacity] = useIntro(scale);\n\n  return (\n    <group ref={box}>\n      <animated.mesh scale={currentScale}>\n        <boxGeometry attach=\"geometry\" />\n        <animated.meshLambertMaterial\n          attach=\"material\"\n          opacity={currentOpacity}\n          transparent\n        />\n      </animated.mesh>\n    </group>\n  );\n};\n\nexport default Box;\n","import React, { FC } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { Color, Vector3 } from 'three';\n\nimport Box from '../box';\n\nconst Boxes: FC = () => {\n  return (\n    <div className=\"splash\">\n      <Canvas>\n        <ambientLight color={new Color('cyan')} intensity={0.5} />\n        <directionalLight />\n        <directionalLight\n          position={new Vector3(0, -1, 0)}\n          color={new Color('blue')}\n          intensity={0.35}\n        />\n        {new Array(10).fill(null).map((_, i) => (\n          <Box key={i} scale={1 + i / 2} />\n        ))}\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Boxes;\n"],"sourceRoot":""}