{"version":3,"sources":["components/splash/box/index.tsx","components/splash/boxes/index.tsx"],"names":["Box","scale","box","useRef","useFrame","current","rotation","x","y","useSpring","from","currentScale","currentOpacity","config","molasses","delay","useIntro","ref","mesh","attach","meshLambertMaterial","opacity","transparent","Boxes","className","color","Color","intensity","position","Vector3","Array","fill","map","_","i"],"mappings":"iLAgCA,IAiBeA,EAjBqB,SAAC,GAAmB,IAAD,IAAhBC,MAAgB,EA1BvD,SAAkBA,GAChB,IAAMC,EAAMC,mBAEZC,aAAS,WACDF,GAAOA,EAAIG,UAIjBH,EAAIG,QAAQC,SAASC,GAAKN,EAAQ,IAClCC,EAAIG,QAAQC,SAASE,GAAUP,EAAQ,IAAb,MATG,MAYUQ,YAAU,CACjDC,KAAM,CACJC,aAAc,CAAC,IAAM,IAAM,KAC3BC,eAAgB,GAElBD,aAAc,CAACV,EAAOA,EAAOA,GAC7BW,eAAgB,IAChBC,OAAQA,IAAOC,SACfC,MAAO,KAAOd,EAAQ,KARhBU,EAZuB,EAYvBA,aAAcC,EAZS,EAYTA,eAWtB,MAAO,CAACV,EAAKS,EAAcC,GAIiBI,MADS,MAAR,EAAQ,sBAC9Cd,EAD8C,KACzCS,EADyC,KAC3BC,EAD2B,KAGrD,OACE,uBAAOK,IAAKf,EAAZ,SACE,eAAC,IAASgB,KAAV,CAAejB,MAAOU,EAAtB,UACE,6BAAaQ,OAAO,aACpB,cAAC,IAASC,oBAAV,CACED,OAAO,WACPE,QAAST,EACTU,aAAW,UCjBNC,UAnBG,WAChB,OACE,qBAAKC,UAAU,QAAf,SACE,eAAC,IAAD,WACE,8BAAcC,MAAO,IAAIC,QAAM,QAASC,UAAW,KACnD,qCACA,kCACEC,SAAU,IAAIC,UAAQ,GAAI,EAAG,GAC7BJ,MAAO,IAAIC,QAAM,QACjBC,UAAW,MAEZ,IAAIG,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAC5B,cAAC,EAAD,CAAajC,MAAO,EAAIiC,EAAI,GAAlBA","file":"static/js/4.f6014caa.chunk.js","sourcesContent":["import React, { FC, useRef } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Group } from 'three';\nimport { animated, useSpring } from 'react-spring/three';\nimport { config } from 'react-spring';\n\nfunction useIntro(scale: number) {\n  const box = useRef<Group>();\n\n  useFrame(() => {\n    if (!(box && box.current)) {\n      return;\n    }\n\n    box.current.rotation.x += scale / 1000;\n    box.current.rotation.y += 2 * (scale / 1000);\n  });\n\n  const { currentScale, currentOpacity } = useSpring({\n    from: {\n      currentScale: [0.01, 0.01, 0.01],\n      currentOpacity: 0,\n    },\n    currentScale: [scale, scale, scale],\n    currentOpacity: 0.15,\n    config: config.molasses,\n    delay: 500 / (scale - 1),\n  });\n\n  return [box, currentScale, currentOpacity];\n}\n\nconst Box: FC<{ scale?: number }> = ({ scale = 3 }) => {\n  const [box, currentScale, currentOpacity] = useIntro(scale);\n\n  return (\n    <group ref={box}>\n      <animated.mesh scale={currentScale}>\n        <boxGeometry attach=\"geometry\" />\n        <animated.meshLambertMaterial\n          attach=\"material\"\n          opacity={currentOpacity}\n          transparent\n        />\n      </animated.mesh>\n    </group>\n  );\n};\n\nexport default Box;\n","import React, { FC } from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { Color, Vector3 } from 'three';\n\nimport Box from '../box';\n\nconst Boxes: FC = () => {\n  return (\n    <div className=\"boxes\">\n      <Canvas>\n        <ambientLight color={new Color('cyan')} intensity={0.5} />\n        <directionalLight />\n        <directionalLight\n          position={new Vector3(0, -1, 0)}\n          color={new Color('blue')}\n          intensity={0.35}\n        />\n        {new Array(10).fill(null).map((_, i) => (\n          <Box key={i} scale={1 + i / 2} />\n        ))}\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Boxes;\n"],"sourceRoot":""}