{"version":3,"sources":["reducer.ts","components/descs/index.tsx","components/links/index.tsx","components/app/index.tsx","service-worker.ts","index.tsx"],"names":["titles","descriptors","state","window","__STATE__","ActionType","initialState","currentTitle","sample","currentDescriptor","getFresh","current","pool","fresh","reducer","action","type","Change","snapSaveState","Descs","_useDescs","_useReducer","useReducer","_useReducer2","Object","slicedToArray","_useReducer2$","dispatch","useEffect","timeoutId","setTimeout","clearTimeout","useDescs","_useDescs2","react_default","a","createElement","Links","href","title","Icon","FaGithub","FaTwitter","FaLinkedinIn","map","_ref","key","concat","App","className","descs","links","Boolean","location","hostname","match","rootEl","document","getElementById","hasChildNodes","hydrate","render","app","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAEMA,EAAS,CACb,sBACA,wBACA,aACA,oBACA,sBACA,iBAGIC,EAAc,CAClB,UACA,UACA,aACA,aACA,cACA,YAIIC,EAAQC,OAAOC,iBAEdD,OAAOC,UAEP,IAQKC,EARCC,EAAsBJ,GAAS,CAC1CK,aAAcC,iBAAOR,GACrBS,kBAAmBD,iBAAOP,IAmB5B,SAASS,EAASC,EAAiBC,GAGjC,IAFA,IAAIC,EAAQL,iBAAOI,GAEZC,IAAUF,GACfE,EAAQL,iBAAOI,GAGjB,OAAOC,EAGF,SAASC,EAAQZ,EAAca,GACpC,OAAQA,EAAOC,MACb,KAAKX,EAAWY,OACd,MAAO,CACLV,aAAcG,EAASR,EAAMK,aAAcP,GAC3CS,kBAAmBC,EAASR,EAAMO,kBAAmBR,IAEzD,QACE,OAAOC,GAjCbC,OAAOe,cAAgB,iBAAO,CAAEd,UAAWE,aAE/BD,sCCRZ,IAYec,EAZG,WAAM,IAAAC,EAnBxB,WAAoB,IAAAC,EACsCC,qBACtDR,EACAR,GAHgBiB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAAK,EAAAH,EAAA,GACThB,EADSmB,EACTnB,aAAcE,EADLiB,EACKjB,kBAAqBkB,EAD1BJ,EAAA,GAgBlB,OAVAK,oBAAU,WACR,IAAMC,EAAYC,WAAW,WAC3BH,EAAS,CAAEX,KAAMX,EAAWY,UAC3B,MAEH,OAAO,WACLc,aAAaF,KAEd,CAACtB,EAAcE,IAEX,CAACF,EAAcE,GAIoBuB,GADpBC,EAAAT,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACfb,EADe0B,EAAA,GACDxB,EADCwB,EAAA,GAGtB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UAAK7B,GACL2B,EAAAC,EAAAC,cAAA,UAAK3B,YCCI4B,SA5BG,kBAChBH,EAAAC,EAAAC,cAAA,UACG,CACC,CACEE,KAAM,qCACNC,MAAO,SACPC,KAAMC,KAER,CACEH,KAAM,sCACNC,MAAO,UACPC,KAAME,KAER,CACEJ,KAAM,8CACNC,MAAO,WACPC,KAAMG,MAERC,IAAI,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,KAAMC,EAATM,EAASN,MAAOC,EAAhBK,EAAgBL,KAAhB,OACJN,EAAAC,EAAAC,cAAA,MAAIU,IAAG,GAAAC,OAAKR,EAAL,MAAAQ,OAAeT,IACpBJ,EAAAC,EAAAC,cAAA,KAAGE,KAAMA,EAAMC,MAAOA,GACpBL,EAAAC,EAAAC,cAACI,EAAD,aCRKQ,EAXC,kBACdd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,SCDcC,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAASC,SAASC,eAAe,SACtCF,GAAUA,EAAOG,gBAAkBC,UAAUC,UAAQ3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASN,GDiIzD,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.28e71801.chunk.js","sourcesContent":["import { sample } from 'lodash';\n\nconst titles = [\n  'computer programmer',\n  'creative technologist',\n  'game maker',\n  'software engineer',\n  'solutions architect',\n  'web developer',\n];\n\nconst descriptors = [\n  'analyst',\n  'dabbler',\n  'dilettante',\n  'generalist',\n  'philosopher',\n  'tinkerer',\n];\n\n// @ts-ignore: 2339\nconst state = window.__STATE__ as State;\n// @ts-ignore: 2339\ndelete window.__STATE__;\n\nexport const initialState: State = state || {\n  currentTitle: sample(titles)!,\n  currentDescriptor: sample(descriptors)!,\n};\n\n// @ts-ignore: 2339\nwindow.snapSaveState = () => ({ __STATE__: initialState });\n\nexport enum ActionType {\n  Change,\n}\n\ntype State = {\n  currentTitle: string;\n  currentDescriptor: string;\n};\n\ntype Action = {\n  type: ActionType;\n};\n\nfunction getFresh(current: string, pool: string[]): string {\n  let fresh = sample(pool)!;\n\n  while (fresh === current) {\n    fresh = sample(pool)!;\n  }\n\n  return fresh;\n}\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.Change:\n      return {\n        currentTitle: getFresh(state.currentTitle, titles),\n        currentDescriptor: getFresh(state.currentDescriptor, descriptors),\n      };\n    default:\n      return state;\n  }\n}\n","import React, { FC, useEffect, useReducer } from 'react';\n\nimport './style.css';\n\nimport { initialState, reducer, ActionType } from '../../reducer';\n\nfunction useDescs() {\n  const [{ currentTitle, currentDescriptor }, dispatch] = useReducer(\n    reducer,\n    initialState,\n  );\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      dispatch({ type: ActionType.Change });\n    }, 2500);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [currentTitle, currentDescriptor]);\n\n  return [currentTitle, currentDescriptor];\n}\n\nconst Descs: FC = () => {\n  const [currentTitle, currentDescriptor] = useDescs();\n\n  return (\n    <ul>\n      <li>artist</li>\n      <li>{currentTitle}</li>\n      <li>{currentDescriptor}</li>\n    </ul>\n  );\n};\n\nexport default Descs;\n","import React, { FC } from 'react';\nimport { FaGithub, FaTwitter, FaLinkedinIn } from 'react-icons/fa';\n\nimport './style.css';\n\nconst Links: FC = () => (\n  <ul>\n    {[\n      {\n        href: 'https://github.com/mysterycommand/',\n        title: 'GitHub',\n        Icon: FaGithub,\n      },\n      {\n        href: 'https://twitter.com/mysterycommand/',\n        title: 'Twitter',\n        Icon: FaTwitter,\n      },\n      {\n        href: 'https://www.linkedin.com/in/mysterycommand/',\n        title: 'Linkedin',\n        Icon: FaLinkedinIn,\n      },\n    ].map(({ href, title, Icon }) => (\n      <li key={`${title}: ${href}`}>\n        <a href={href} title={title}>\n          <Icon />\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default Links;\n","import React, { FC } from 'react';\n\nimport './style.css';\n\nimport Descs from '../descs';\nimport Links from '../links';\n\nconst App: FC = () => (\n  <div className=\"app\">\n    <header>\n      <h1>Matt Hayes is</h1>\n      <h1>@mysterycommand</h1>\n      <Descs />\n      <Links />\n    </header>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\n\nimport './style.css';\nimport App from './components/app';\nimport * as sw from './service-worker';\n\nconst rootEl = document.getElementById('root');\n(rootEl && rootEl.hasChildNodes() ? hydrate : render)(<App />, rootEl);\n\nsw.unregister();\n"],"sourceRoot":""}